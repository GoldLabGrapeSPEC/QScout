# -*- coding: utf-8 -*-

"""
/***************************************************************************
 pin_dropper
                                 A QGIS plugin
 Drops pins
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-29
        copyright            : (C) 2020 by Joshua Evans
        email                : joshuaevanslowell@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Joshua Evans'
__date__ = '2020-09-29'
__copyright__ = '(C) 2020 by Joshua Evans'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import math
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterString,
                       QgsWkbTypes,
                       QgsFields,
                       QgsField)


class PinDropperAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    RASTER_INPUT = 'RASTER_INPUT'
    BOUND_BOX_INPUT = 'BOUND_BOX_INPUT'
    ROW_VECTOR_INPUT = 'R0W_VECTOR_INPUT'
    ROW_HEIGHT_INPUT = 'ROW_HEIGHT_INPUT'
    ROW_HEIGHT_STDEV_INPUT = 'ROW_HEIGHT_STDEV_INPUT'
    POINT_INTERVAL_INPUT = 'POINT_INTERVAL_INPUT'
    POINT_INTERVAL_STDEV_INPUT = 'POINT_INTERVAL_STDEV_INPUT'
    OVERLAY_BOX_RADIUS_INPUT = 'OVERLAY_BOX_RADIUS_INPUT'
    FIELD_NAME_INPUT = 'FIELD_NAME_INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # raster layer. repeating pattern in the raster will be used to drop pins
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.RASTER_INPUT,
                self.tr('Raster Layer'),
                [QgsProcessing.TypeRaster]
            )
        )
        # bounding box
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.BOUND_BOX_INPUT,
                self.tr('Bounding Box'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # overlay box radius
        self.addParameter(
            QgsProcessingParameterNumber(
                self.OVERLAY_BOX_RADIUS_INPUT,
                self.tr('Overlay Box Radius'),
                minValue=0,
                defaultValue=2
            )
        )

        #field name
        self.addParameter(
            QgsProcessingParameterString(
                self.FIELD_NAME_INPUT,
                self.tr('Output Field Name'),
                defaultValue="data"
            )
        )

        # direction vector for rows
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.ROW_VECTOR_INPUT,
                self.tr('Row Vector'),
                [QgsProcessing.TypeVectorLine],
            )
        )

        #optional parameters
        self.addParameter(
            QgsProcessingParameterNumber(
                self.ROW_HEIGHT_INPUT,
                self.tr('Row Height'),
                type=QgsProcessingParameterNumber.Double,
                minValue=0,
                optional=True
            )
        )
        self.addParameter(
            QgsProcessingParameterNumber(
                self.ROW_HEIGHT_STDEV_INPUT,
                self.tr('Row Height Stdev'),
                type=QgsProcessingParameterNumber.Double,
                minValue=0,
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.POINT_INTERVAL_INPUT,
                self.tr('Point Interval'),
                type=QgsProcessingParameterNumber.Double,
                minValue=0,
                optional=True
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                self.POINT_INTERVAL_STDEV_INPUT,
                self.tr('Point Interval Stdev'),
                type=QgsProcessingParameterNumber.Double,
                minValue=0,
                optional=True
            )
        )



        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the procedxssAlgorithm function.

        # required parameters
        raster = self.parameterAsRasterLayer(parameters, self.RASTER_INPUT, context)
        bound_box = self.parameterAsVectorLayer(parameters, self.BOUND_BOX_INPUT, context)
        overlay_box_radius = self.parameterAsInt(parameters, self.OVERLAY_BOX_RADIUS_INPUT, context)

        # optional parameters
        row_vector = self.parameterAsVectorLayer(parameters, self.ROW_VECTOR_INPUT, context)
        row_h = self.parameterAsDouble(parameters, self.ROW_HEIGHT_INPUT, context)
        row_h_stdev = self.parameterAsDouble(parameters, self.ROW_HEIGHT_STDEV_INPUTINPUT, context)
        point_interval = self.parameterAsDouble(parameters, self.POINT_INTERVAL_INPUT, context)
        point_interval_stdev = self.parameterAsDouble(parameters, self.POINT_INTERVAL_STDEV_INPUT, context)

        field_name = self.parameterAsString(parameters, self.FIELD_NAME_INPUT, context)
        print("Hello World")

        # Compute the number of steps to display within the progress bar and
        # get features from source

        out_fields = QgsFields()
        out_fields.append(QgsField(name='fid', type=QVariant.Int, len=6))
        out_fields.append(QgsField(name='org_fid', type=QVariant.Int, len=7))
        out_fields.append(QgsField(name='distance', type=QVariant.Double, len=18, prec=15))
        out_fields.append(QgsField(name='layer', type=QVariant.String, len=5))
        out_fields.append(QgsField(name='path', type=QVariant.String, len=62))
        out_fields.append(QgsField(name=field_name, type=QVariant.Double))

        row_vector = list(row_vector.getFeatures())[0].geometry().asPolyline()
        start = row_vector[0]
        stop = row_vector[len(row_vector)-1]

        bound_box = list(bound_box.getFeatures())[0].geometry()[0]

        assert row_vector[0].within(bound_box)

        theta = math.atan(stop[1] - start[1], stop[0] - start[0])
        row_h_dx = math.cos(theta) * row_h
        row_h_dx_stdev = math.cos(theta) * row_h_stdev
        row_h_dy = math.sin(theta) * row_h
        row_h_dy_stdev = math.sin(theta) * row_h_stdev
        col_w_dx = math.cos(theta) * point_interval
        col_w_dx_stdev = math.cos(theta) * point_interval_stdev
        col_w_dy = math.sin(theta) * point_interval
        col_w_dy_stdev = math.sin(theta) * point_interval_stdev


        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            fields=out_fields,
            geometryType=QgsWkbTypes.PointGeometry,
            crs=bound_box.sourceCrs())

        total_work_to_calc = bound_box.area() / ((row_h_dx + col_w_dx) * (row_h_dy + col_w_dy))
        counter = 0

        points_layout = PointsLayout(start)

        while not self.is_complete(points_layout, bound_box):
            if feedback.isCanceled():
                break



            feedback.setProgress(int(100 * points_layout.population() / total_work_to_calc))

            if points_layout.population() > 2*total_work_to_calc:
                # if the grid has been populated with twice as many points as predicted, something has gone wrong
                break

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Drop Pins Semi-Regularly'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vector creation'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PinDropperAlgorithm()

    def is_complete(self, points, bounds):

    def itr(self):
        pass

class PointsLayout:
    def __init__(self, origin):
        self.__population = 1
        self.__origin = origin

    def population(self):
        return self.__population